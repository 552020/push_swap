highest: 116
to_insert: 45
while loop to_insert not smallest not biggest
before_rb stack_b: 18 116 48 44 
next_smallest: 18
idx_next_smallest: 0
rb
rb
rb
counter: 3	size_b: 4
Check Bug!
pb
ra
ra
ra
ra
ra
ra
ra
ra
ra
--
rb
rb
rb
rb
rb
rb
rb
rb
rb
counter: 12	size_b: 13
Check Bug!
pb
ra
ra
ra
*stack_b[0]; 101
*stack_b[size_b - 1]; 105
smallest: 1
highest: 116
to_insert: 107
while loop to_insert not smallest not biggest
--
rb
rb
rb
rb
rb
rb
rb
rb
rb
counter: 13	size_b: 14
Check Bug!
pb
ra
ra
ra
ra
ra
ra
ra
*stack_b[0]; 107
*stack_b[size_b - 1]; 111
--
rb
rb
rb
rb
rb
rb
rb
rb
rb
counter: 26	size_b: 27
Check Bug!
pb
ra
ra
ra
ra
ra
*stack_b[0]; 96
*stack_b[size_b - 1]; 97
smallest: 1
highest: 116
--
rb
rb
rb
rb
rb
rb
rb
rb
rb
counter: 33	size_b: 34
Check Bug!
pb
ra
ra
*stack_b[0]; 117
*stack_b[size_b - 1]; 151
smallest: 1
highest: 165
to_insert: 24
while loop to_insert not smallest not biggest
before_rb stack_b: 117 116 115 111 109 107 105 104 101 97 96 93 88 78 69 66 63 59 52 50 48 46 45 44 41 26 23 19 18 12 6 2 1 165 151 
--
rb
rb
rb
rb
rb
rb
rb
rb
rb
counter: 71	size_b: 72
Check Bug!
pb
ra
ra
ra
*stack_b[0]; 191
*stack_b[size_b - 1]; 214
smallest: 0
highest: 214
to_insert: 190
while loop to_insert not smallest not biggest
--
rb
rb
rb
rb
rb
rb
rb
rb
rb
counter: 156	size_b: 157
Check Bug!
pb
ra
ra
ra
ra
ra
ra
ra
ra
ra
--
rb
rb
rb
rb
rb
rb
rb
rb
rb
counter: 160	size_b: 161
Check Bug!
pb
ra
*stack_b[0]; 366
*stack_b[size_b - 1]; 383
smallest: 0
highest: 423
to_insert: 377
while loop to_insert not smallest not biggest
before_rb stack_b
next_smallest: 366
--
rb
rb
rb
rb
rb
rb
rb
rb
rb
counter: 197	size_b: 198
Check Bug!
pb
ra
ra
ra
ra
ra
ra
ra
ra
rrb
--
rb
rb
rb
rb
rb
rb
rb
rb
rb
counter: 200	size_b: 201
Check Bug!
pb
ra
*stack_b[0]; 435
*stack_b[size_b - 1]; 455
smallest: 0
highest: 514
to_insert: 466
while loop to_insert not smallest not biggest
before_rb stack_b: 435 434 430 427 424 423 421 418 417 416 415 413 410 409 404 403 401 400 399 398 397 396 394 392 391 389 386 385 383 382 381 377 371 366 362 359 355 353 349 348 345 343 337 336 334 331 325 324 322 318 313 304 303 302 297 296 290 289 285 284 283 279 277 276 275 271 270 268 267 264 262 260 259 256 254 252 251 250 248 247 246 239 238 237 232 230 229 228 224 223 222 220 216 214 206 203 200 197 195 193 191 190 189 188 186 184 180 179 177 175 171 167 166 165 161 159 158 156 154 151 150 149 148 143 141 140 139 138 136 135 133 131 125 122 119 117 116 115 111 109 107 105 104 101 98 97 96 94 93 88 86 85 79 78 73 69 66 63 60 59 58 56 53 52 50 48 46 45 44 42 41 39 38 30 27 26 24 23 19 18 17 15 14 13 12 11 6 2 1 0 514 499 496 495 491 489 488 474 473 468 464 455 
next_smallest: 464
--
rb
rb
rb
rb
rb
rb
rb
rb
rb
counter: 227	size_b: 228
Check Bug!
pb
*stack_b[0]; 576
*stack_b[size_b - 1]; 580
smallest: 0
highest: 580
to_insert: 575
while loop to_insert not smallest not biggest
before_rb stack_b: 576 574 569 568 562 561 557 553 550 545 536 531 528 523 514 499 496 495 493 491 489 488 474 473 468 466 464 461 455 454 439 437 435 434 432 431 430 427 424 423 422 421 419 418 417 416 415 413 410 409 408 404 403 402 401 400 399 398 397 396 394 392 391 389 386 385 383 382 381 377 371 366 362 359 355 353 349 348 345 343 337 336 334 331 325 324 322 318 313 304 303 302 297 296 290 289 285 284 283 279 277 276 275 271 270 268 267 264 262 260 259 256 254 252 251 250 248 247 246 239 238 237 232 230 229 228 224 223 222 220 216 214 206 203 200 197 195 193 191 190 189 188 186 184 180 179 177 175 171 167 166 165 161 159 158 156 154 151 150 149 148 143 141 140 139 138 136 135 133 131 125 122 119 117 116 115 111 109 107 105 104 101 98 97 96 94 93 88 86 85 79 78 73 69 66 63 60 59 58 56 53 52 50 48 46 45 44 42 41 39 38 30 27 26 24 23 19 18 17 15 14 13 12 11 6 2 1 0 580 
next_smallest: 574
idx_next_smallest: 1
--
rb
rb
rb
rb
rb
rb
rb
rb
rb
counter: 291	size_b: 292
Check Bug!
pb
ra
*stack_b[0]; 680
*stack_b[size_b - 1]; 695
smallest: 0
highest: 695
to_insert: 601
while loop to_insert not smallest not biggest
before_rb stack_b
next_smallest: 600
--
rb
rb
rb
rb
rb
rb
rb
rb
rb
counter: 301	size_b: 302
Check Bug!
pb
ra
*stack_b[0]; 684
*stack_b[size_b - 1]; 695
smallest: 0
highest: 723
to_insert: 643
while loop to_insert not smallest not biggest
before_rb stack_b
next_smallest: 639
--
rb
rb
rb
rb
rb
rb
rb
rb
rb
counter: 308	size_b: 309
Check Bug!
pb
ra
*stack_b[0]; 681
*stack_b[size_b - 1]; 684
smallest: 0
highest: 723
to_insert: 709
while loop to_insert not smallest not biggest
before_rb stack_b: 681 680 677 675 668 665 660 656 651 646 643 639 632 628 626 624 622 621 617 616 613 612 611 610 609 606 605 603 602 601 600 598 594 591 590 587 585 583 580 578 577 576 575 574 573 569 568 566 563 562 561 557 556 553 550 549 545 542 541 539 536 531 530 528 527 523 519 517 514 512 510 508 501 499 498 497 496 495 494 493 491 489 488 482 480 478 477 475 474 473 471 469 468 466 465 464 462 461 460 459 455 454 450 449 441 439 437 435 434 432 431 430 427 424 423 422 421 419 418 417 416 415 413 410 409 408 404 403 402 401 400 399 398 397 396 394 392 391 389 386 385 383 382 381 377 371 366 362 359 355 353 349 348 345 343 337 336 334 331 325 324 322 318 313 304 303 302 297 296 290 289 285 284 283 279 277 276 275 271 270 268 267 264 262 260 259 256 254 252 251 250 248 247 246 239 238 237 232 230 229 228 224 223 222 220 216 214 206 203 200 197 195 193 191 190 189 188 186 184 180 179 177 175 171 167 166 165 161 159 158 156 154 151 150 149 148 143 141 140 139 138 136 135 133 131 125 122 119 117 116 115 111 109 107 105 104 101 98 97 96 94 93 88 86 85 79 78 73 69 66 63 60 59 58 56 53 52 50 48 46 45 44 42 41 39 38 30 27 26 24 23 19 18 17 15 14 13 12 11 6 2 1 0 723 713 706 703 700 695 684 
next_smallest: 706
--
rb
rb
rb
rb
rb
rb
rb
rb
rb
counter: 375	size_b: 376
Check Bug!
pb
ra
ra
*stack_b[0]; 777
*stack_b[size_b - 1]; 780
smallest: 0
highest: 833
to_insert: 754
while loop to_insert not smallest not biggest
before_rb stack_b
--
rb
rb
rb
rb
rb
rb
rb
rb
rb
counter: 391	size_b: 392
Check Bug!
pb
*stack_b[0]; 878
*stack_b[size_b - 1]; 887
smallest: 0
highest: 895
to_insert: 876
while loop to_insert not smallest not biggest
before_rb stack_b
next_smallest: 875
idx_next_smallest: 1
--
rb
rb
rb
rb
rb
rb
rb
rb
rb
counter: 407	size_b: 408
Check Bug!
pb
ra
*stack_b[0]; 853
*stack_b[size_b - 1]; 857
smallest: 0
highest: 895
to_insert: 838
while loop to_insert not smallest not biggest
before_rb stack_b
next_smallest: 836
--
rb
rb
rb
rb
rb
rb
rb
rb
rb
counter: 448	size_b: 449
Check Bug!
pb
ra
*stack_b[0]; 918
*stack_b[size_b - 1]; 919
smallest: 0
highest: 927
to_insert: 921
while loop to_insert not smallest not biggest
before_rb stack_b
next_smallest: 918
--
rb
rb
rb
rb
rb
rb
rb
rb
rb
counter: 449	size_b: 450
Check Bug!
pb
ra
ra
ra
ra
ra
rrb
rrb
pb
*stack_b[0]; 937
--
rb
rb
rb
rb
rb
rb
rb
rb
rb
counter: 472	size_b: 473
Check Bug!
pb
*stack_b[0]; 972
*stack_b[size_b - 1]; 975
smallest: 0
highest: 975
to_insert: 944
while loop to_insert not smallest not biggest
before_rb stack_b
next_smallest: 937
idx_next_smallest: 7
--
rb
rb
rb
rb
rb
rb
rb
rb
rb
counter: 488	size_b: 489
Check Bug!
pb
*stack_b[0]; 979
*stack_b[size_b - 1]; 987
smallest: 0
highest: 1000
to_insert: 983
while loop to_insert not smallest not biggest
before_rb stack_b
next_smallest: 979
idx_next_smallest: 0
